  // Chat widget route with user and chatbot parameters - only match specific patterns
  app.get("/widget/:userId/:chatbotGuid", async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { userId, chatbotGuid } = req.params;
      const { embedded = "true", mobile = "false" } = req.query;

      console.log(`Loading widget for userId: ${userId}, chatbotGuid: ${chatbotGuid}`);

      // Get chatbot config from database
      const chatbotConfig = await storage.getChatbotConfigByGuid(userId, chatbotGuid);
      if (!chatbotConfig || !chatbotConfig.isActive) {
        console.log(`Chatbot not found or inactive: ${chatbotGuid}`);
        return res.status(404).send('Chatbot not found or inactive');
      }

      console.log(`Found chatbot config: ${chatbotConfig.name}`);



      const sessionId = req.query.sessionId as string || `embed_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const isMobile = req.query.mobile === 'true';
      const isEmbedded = req.query.embedded === 'true';

      // Force HTTPS in production environments
      const protocol = app.get("env") === "production" ? 'https' : req.protocol;
      const apiUrl = protocol + '://' + req.get('host');

      console.log(`Environment: ${app.get("env")}, Protocol: ${protocol}, API URL: ${apiUrl}`);

      if (app.get("env") === "production") {
        const distPath = path.resolve(__dirname, "../dist/public");
        const htmlPath = path.join(distPath, 'index.html');

        console.log(`Looking for HTML file at: ${htmlPath}`);
        console.log(`File exists: ${fs.existsSync(htmlPath)}`);

        let html;
        if (!fs.existsSync(htmlPath)) {
          console.log(`HTML file not found, trying alternative paths...`);
          // Try different possible paths
          const alternativePaths = [
            path.resolve(__dirname, "./public/index.html"),
            path.resolve(__dirname, "../public/index.html"), 
            path.resolve(__dirname, "dist/public/index.html"),
            path.resolve(process.cwd(), "dist/public/index.html")
          ];

          let found = false;
          for (const altPath of alternativePaths) {
            console.log(`Trying: ${altPath} - exists: ${fs.existsSync(altPath)}`);
            if (fs.existsSync(altPath)) {
              html = fs.readFileSync(altPath, 'utf8');
              console.log(`Successfully loaded HTML from: ${altPath}`);
              found = true;
              break;
            }
          }

          if (!found) {
            return res.status(500).send('HTML template not found');
          }
        } else {
          html = fs.readFileSync(htmlPath, 'utf8');
        }

        // Inject session data and chatbot config into the HTML
        const sessionData = `
          <script>
            window.__CHAT_WIDGET_CONFIG__ = {
              sessionId: "${sessionId}",
              apiUrl: "${apiUrl}",
              isMobile: ${isMobile},
              embedded: ${isEmbedded},
              chatbotConfig: ${JSON.stringify(chatbotConfig)}
            };
          </script>
        `;

        html = html.replace('</head>', `${sessionData}</head>`);
        res.setHeader('Content-Type', 'text/html');
        res.send(html);
      } else {
        // In development, inject config and let Vite dev server handle the rest
        req.url = '/';
        req.chatWidgetConfig = {
          sessionId,
          apiUrl,
          isMobile,
          embedded: isEmbedded,
          chatbotConfig
        };
        next();
      }
    } catch (error) {
      console.error('Error serving chatbot widget:', error);
      res.status(500).send('Internal server error');
    }
  });