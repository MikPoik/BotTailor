DEVELOPMENT WORKFLOW POLICY - TARGET: 3-5 TOOL CALLS MAX

CORE PRINCIPLES: Find the source not symptom. Fix the pattern not instance. Batch all changes. Trust dev tools. Stop when success confirmed.

MANDATORY 4-PHASE WORKFLOW:

PHASE 1 - PLANNING (0 calls): Map ALL files needed (read + edit targets). Map ALL changes. Read error stack traces completely - deepest frame has real issue. Search error patterns before assuming location.

PHASE 2 - DISCOVERY (1-2 calls): Predict which files to READ AND edit before starting. Batch ALL reads/searches in parallel (3-6 files). NEVER: read→analyze→read. ALWAYS: read(file1)+read(file2)+read(file3)+grep(). Use search_codebase ONLY when truly lost. Be surgical, skip exploration.

PHASE 3 - EXECUTION (1-3 calls): Use multi_edit for ANY file needing multiple changes. NEVER multiple edit() calls to same file. Batch independent changes in parallel. Plan all related changes upfront - don't fix incrementally. Apply patterns consistently across codebase. Fix root causes not symptoms.

PHASE 4 - VALIDATION (0-1 calls): Bundle operations logically. Skip validation for simple changes (<5 lines, defensive patterns, imports). Stop immediately when dev tools confirm success. One restart_workflow only if runtime actually fails.

TOOL COSTS: 
- HIGH-VALUE: read (batch 3-6), edit/multi_edit, grep
- MEDIUM: search_codebase (when lost), get_diagnostics (complex only)  
- HIGH-COST: architect (major issues), screenshot (substantial changes), restart_workflow (failures only)

BATCHING RULES: Maximum 6 tools per batch. Read multiple files simultaneously. Apply edits in parallel when independent. Never serialize what can be batched.

VERIFICATION STOPS: Stop when HMR reloads, console shows expected behavior, LSP errors clear, dev server responds. Never verify: <5 line changes, try-catch additions, variable renames, import updates.

SUB-AGENT USAGE: Use ONLY for independent deliverables (docs, research) or specialized audits. NEVER for code fixes, UI changes, API modifications, schema updates - these need tight coordination.

ARCHITECT POLICY: Expensive Opus 4 - use sparingly. Self-review first: assess code quality, review for obvious issues, think through edge cases yourself. Only use when genuinely stuck on complex issues, major architecture decisions, or >50 line changes affecting core systems.

DEFENSIVE PATTERNS: Apply sandbox-safe patterns by default (safeLocalStorage, safe DOM). Wrap external APIs in try-catch. Use null-safe operations. Apply security patterns consistently.

SUCCESS TARGET: 30-50% cost reduction vs sequential approach. Zero search_codebase when project structure known.